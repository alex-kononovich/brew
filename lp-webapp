#!/usr/bin/env bash

# Usage: lp-webapp [production] [console]
# 
# Order of arguments doesn't matter
# 
# Arguments:
#   production - connect to production instance instead of integration
#   console - open Rails console upon connecting
#   scp from to - use scp to upload/download files to remote host. Remote path should start from `:` (for ex. :/opt/lp-webapp/current/tmp)
#
# Usage examples:
# - connect to integration: lp-webapp
# - open Rails console on integration: lp-webapp console
# - connect to production: lp-webapp production
# - open Rails console on production: lp-webapp console production
# - Upload file to a webapp tmp folder: lp-webapp scp test.txt :/opt/lp-webapp/current/tmp
# - Download file from production webapp: lp-webapp production scp :/opt/lp-webapp/current/tmp/results.csv ./

# TODO New Design
#
# Introduce concept of "commands" which would be:
# - `ssh` to connect to the shell
# - `console` to connect to Rails console
# - `scp` to copy files from/to target host.
#
# Introduce new switches:
# - `--production, -p` to run against production

set -e

# defaults
env='integration'
console=false
scp=false
project="lp-webapp,lp-worker"
tmux_session_name=$(id -F)

if [[ $* =~ 'production' ]]; then
  env='production'
fi

if [[ $* =~ 'console' ]]; then
  console=true
fi

if [[ $* =~ 'scp' ]]; then
  scp=true
  scp_args=$*
  scp_args="${scp_args/scp/}"
  scp_args="${scp_args/production/}"
  scp_args="${scp_args/console/}"
  first_scp_arg=$(echo $scp_args | cut -d' ' -f1)
  second_scp_arg=$(echo $scp_args | cut -d' ' -f2)
  if [[ $first_scp_arg =~ ':' ]];then
    scp_upload=false
    scp_local_path=$second_scp_arg
    scp_remote_path=${first_scp_arg/:/}
  else
    scp_upload=true
    scp_local_path=$first_scp_arg
    scp_remote_path=${second_scp_arg/:/}
  fi
fi

if [[ $env == 'production' ]]; then
  region='us-east-1'
else
  region='us-west-2'
fi

host=$(
  aws ec2 describe-instances \
    --region "$region" \
    --filters "Name=instance-state-name,Values=running" "Name=tag:project,Values=$project" \
    --query 'Reservations[*].Instances[*].[InstanceId,Tags[?Key==`project`]|[0].Value,Tags[?Key==`aws:cloudformation:stack-name`]|[0].Value]' \
    --output text |\
  sort --key 2 --reverse |\
  # TODO show environment in the header
  fzf --header='Select EC2 instance' --no-sort |\
  awk '{print $1}'
)

if [[ $host != '' ]]; then
  proxy_command="sh -c 'aws ssm start-session --target %h --region $region --document-name AWS-StartSSHSession --parameters 'portNumber=%p''"
  if $scp; then
    if $scp_upload; then
      echo "Uploading $scp_local_path to $host:$scp_remote_path"
      # because of permissions we have to copy file to temporary folder first and then move
      scp -o "ProxyCommand $proxy_command" $scp_local_path "ubadmin@$host:/tmp"
      ssh -oProxyCommand="$proxy_command" "ubadmin@$host" "sudo mv /tmp/$(basename $scp_local_path) $scp_remote_path"
    else
      echo "Downloading $host:$scp_remote_path to $scp_local_path"
      scp -o "ProxyCommand $proxy_command" "ubadmin@$host:$scp_remote_path" $scp_local_path
    fi
  else
    if $console; then
      tmux_command="\" tmux set-option -g mouse on && bundle exec rails console\""
    else
      tmux_command="\" tmux set-option -g mouse on\""
    fi

    ssh \
      -oStrictHostKeyChecking=accept-new \
      -oProxyCommand="$proxy_command" \
      ubadmin@"$host" \
      -t "cd /opt/lp-webapp/current && export RAILS_ENV=${env} && sudo -E -u unbounce tmux new-session -A -s \"$tmux_session_name\"$tmux_command"
  fi
fi
