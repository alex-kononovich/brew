#!/usr/bin/env bash

# Usage: lp-webapp [production] [console] [copy]
# 
# Order of arguments doesn't matter
# 
# Arguments:
#   production - connect to production instance instead of integration
#   console - open Rails console upon connecting
#   copy - instead of connecting just put host into a clipboard
#
# Usage examples:
# - connect to integration: lp-webapp
# - open Rails console on integration: lp-webapp console
# - connect to production: lp-webapp production
# - open Rails console on production: lp-webapp console production

set -e

# defaults
env='integration'
console=false
copy_host=false
project="lp-webapp,lp-worker"
tmux_session_name=$(id -F)

if [[ $* =~ 'production' ]]; then
  env='production'
fi

if [[ $* =~ 'console' ]]; then
  console=true
fi

if [[ $* =~ 'copy' ]]; then
  copy_host=true
fi

if [[ $env == 'production' ]]; then
  region='us-east-1'
else
  region='us-west-2'
fi

host=$(
  aws ec2 describe-instances \
    --region "$region" \
    --filters "Name=instance-state-name,Values=running" "Name=tag:project,Values=$project" \
    --query 'Reservations[*].Instances[*].[InstanceId,Tags[?Key==`project`]|[0].Value,Tags[?Key==`aws:cloudformation:stack-name`]|[0].Value]' \
    --output text |\
  sort --key 2 --reverse |\
  fzf --header='Select EC2 instance' --no-sort |\
  awk '{print $1}'
)

if [[ $host != '' ]]; then
  if $console; then
    tmux_command=" \"bundle exec rails console\""
  else
    tmux_command=""
  fi

  if $copy_host; then
    echo "${host}" | pbcopy
  else
    ssh \
      -oStrictHostKeyChecking=accept-new \
      -oProxyCommand="sh -c 'aws ssm start-session --target %h --region $region --document-name AWS-StartSSHSession --parameters 'portNumber=%p''" \
      ubadmin@"$host" \
      -t "cd /opt/lp-webapp/current && export RAILS_ENV=${env} && sudo -E -u unbounce tmux new-session -A -s \"$tmux_session_name\"$tmux_command"
  fi
fi
